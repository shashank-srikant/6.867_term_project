import { Injectable } from '@angular/core' ; import { AuthResponse } from '../models/auth-response' ; import { InitParams } from '../models/init-params' ; import { LoginOptions } from '../models/login-options' ; import { LoginResponse } from '../models/login-response' ; import { LoginStatus } from '../models/login-status' ; import { UIParams } from '../models/ui-params' ; import { UIResponse } from '../models/ui-response' ; declare var FB ; export type ApiMethod = 'get' | 'post' | 'delete' ; @ Injectable ( ) export class FacebookService { init ( params ) < any > { try { return Promise . resolve ( FB . init ( params ) ) ; } catch ( e ) { return Promise . reject ( e ) ; } } api ( path , method = 'get' , params = { } ) < any > { return new Promise < any > ( ( resolve , reject ) => { try { FB . api ( path , method , params , ( response ) => { if ( ! response ) { reject ( ) ; } else if ( response . error ) { reject ( response . error ) ; } else { resolve ( response ) ; } } ) ; } catch ( e ) { reject ( e ) ; } } ) ; } ui ( params ) < UIResponse > { return new Promise < any > ( ( resolve , reject ) => { try { FB . ui ( params , ( response ) => { if ( ! response ) reject ( ) ; else if ( response . error ) reject ( response . error ) ; else resolve ( response ) ; } ) ; } catch ( e ) { reject ( e ) ; } } ) ; } getLoginStatus ( ) < LoginStatus > { return new Promise < LoginStatus > ( ( resolve , reject ) => { try { FB . getLoginStatus ( ( response ) => { if ( ! response ) { reject ( ) ; } else { resolve ( response ) ; } } ) ; } catch ( e ) { reject ( e ) ; } } ) ; } login ( options ? ) < LoginResponse > { return new Promise < LoginResponse > ( ( resolve , reject ) => { try { FB . login ( ( response ) => { if ( response . authResponse ) { resolve ( response ) ; } else { reject ( ) ; } } , options ) ; } catch ( e ) { reject ( e ) ; } } ) ; } logout ( ) < any > { return new Promise < any > ( ( resolve , reject ) => { try { FB . logout ( ( response ) => { resolve ( response ) ; } ) ; } catch ( e ) { reject ( e ) ; } } ) ; } getAuthResponse ( ) { try { return < AuthResponse > FB . getAuthResponse ( ) ; } catch ( e ) { console . error ( 'ng2-facebook-sdk: ' , e ) ; } } }